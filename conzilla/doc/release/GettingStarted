# This document is part of the Conzilla conceptual browser release 1.0
# $Id$


First, see to that conzilla is installed, se the install-document
for this.

From now on I presume that you have a running Conzilla at hand.


Table of Content.

	1 Introduction
	2 Easy browsing
	3 Easy Editing
	  3.1 Identifiers
	  3.2 Creating a map
	  3.3 Creating a concept (a neuron of type 'concept')
	  3.4 Editing metadata
	  3.5 Setting and saving

1 Introduction
	
	In a conceptualbrowser you browse concepts and their relations.
	The presentation could be textual, verbal or visualized somehow in
	3D. 
	Conzilla presents them in maps, we call them conceptmaps.
	To browse conceptmaps means three things (in short).
	  1) Change conceptmap by 'surfing' in on certain concepts.
	    (Like following a link in regular html-browsers)
	  2) View content on a certain concept, typically external media 
	     resources presented in external viewers.
	  3) View metadata about the concepts presented in the map.
	
	We have found that the concepts relations is as interesting as the 
	concepts themselfs implying that the three operations above should
	be possible to performe on them as well.
	As a consequence we refer to both concepts and conceptrelations 
	with 'neuron'. As in biology a neuron contains both a cell and axons we 
	thought it fitted nice intuitavely to something that can appear both as
	a box, an arrow or something in between.
	As an actual neuron should only have one appearance we had to give it 
	a type, a neurontype, to indicate how this neuron should behave.
	We have defined a couple of standard neurontypes that are accessible
	as soon conzilla is installed. Theese are mainly the neccessary
	types to express UML like maps.
	
	A user who don't want to use theese predefined are free to 
	create a set of neurontypes and thus creating their own visual/abstract
	language.
	
	The most frequently used neurontype is 'concept' wich roughly stands
	for a box. A neuron with the 'association' neurontype is a relation 
	between other neurons (no arrowhead as there is no logical direction
	for this neurontype).

2 Easy Browsing
	
	
3 Easy Editing

3.1 Identifiers
	The first thing you have to be acustomized to is identifiers.
	We use a standard called URN:PATH, it strongly resembles a regular
	URL on the web. Lets compare them:
	http://www.conzilla.org/intro/overview 
	urn:path:/org/conzilla/intro/overview
	
	The difference is that the URN:PATH begins with a 
	urn:path:/ instead of http://.
	Antother more logical difference is that a URL is directly usable
	for locating the resource where URN:PATHs has to be looked up and
	resolved into a URL. Actually, urn:path:/org/conzilla is resolved
	to (replaced by) http://www.conzilla.org/ the rest of the subpath 
	is just appended.
	This resolving is done via resolver files located both on the net
	and locally (will be replaced with LDAP in the future).
	The local resolver file is under your conroll and overrides
	the resolvers on the net.
	Hence you can define an acess-method via ftp that allows you to 
	edit maps on another server.
	
	Lets add a path to the local resolver pointing to a directory
	on your own computer.

	  1) Launch Conzilla
	  2) Choose 'resolver tables..' under the settings menu.
	  3) The different resolver tables are shown as different tabs.
	     Make sure that the 'local resolver'-tab are selected.
	     (unshaded means selected, defaultselection is 'local resolver')
	  4) Press the add button.
	  5) Enter /local/crap in the 'Path' field.
	  6) Enter the file:/ URL to the directory you want to create stuff in
	     in the 'Base URI' field.
	  7) Press save and then close button.
	
3.2 Creating a map

	If you have followed instructions in 3.1, 
	you can now create a new map:
	
	  1) Choose 'new map' under the file-menu.
	  2) Enter a URN:PATH using the newly added path, e.g:
	     urn:path:/local/crap/test
	
3.3 Creating a concept (a neuron of type 'concept')

	If you have followed instructions in 3.2, you now have a new map 
	in edit mode will appear and you can start adding stuff by:

	  1) Right click in the background of the map.
	  2) In the menu that appears choose create and then 
	     UML->class diagram->concept
	  3) In the dialog that appears enter a title for the 'concept', 
	     e.g. mumbo jumbo, and press return four times.	
	Now you have a map called test containing a concept with a title describing
	itself as 'mumbo jubo'.


3.4 Edinting metadata

	Both concepts and maps has metadata, further on when I refer to any
	of them I say component.
	To access the metadata for a component you have to open it in
	the componentEditor. This is done by choosing edit in the menu over the 
	component (in the background for the map).

	Choosing edit can be done in both browse and edit mode.
	The only difference is where in the menu the edit choice appers.

	The effect is that the componenteditor (a new window) is poped up with 
	a small window inside representing the component.
	This small window contains two tabs, the first contains some 
	non-metadata information (for a concept the type and uri).
	Tab number two contains the metadata.

3.5 Setting and saving
		
	In the componenteditor you have the choice to 'save' or 'set' a component.
	To 'set' something means that it remains only this session.
	When something is 'set' the changes are propagated to other parts 
	of the program.
	To 'save' preserves the changes to next session.
	
	
	
	When you are in edit mode you can save the map and all concepts therein
	by pressing the save button. nother approach is to save each concept
	and map individually in the componenteditor, i.e. pressing the save
	button on the window representing the component you want to save.
