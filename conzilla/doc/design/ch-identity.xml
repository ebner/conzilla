  <!-- $Id$ -->

  <chapter id="ch-identity">
    <title>Component Identity</title>
    
    
    <section>
      <title>&s1;</title>
      <para>
	The definition of the identifier of the components defines
	much of the capabilities of the database structure. It not
	only acts as a unique label for the components, locally and
	globally, but also may affect the way the component is located
	and used. In fact, the definition of the identifier defines
	much of the infrastructure of the system.
      </para>
    </section>
    
    
    <section id="ch-identity-fr">
      <title>&s2;</title>
      <para>
	The scenario that has inspired the design of the identifier is
	one where the Conzilla user is using components from several
	places simultaneously. Realistic locations include: local
	harddisc, a database on the company LAN (the MOF case), and
	different sources on the Internet. One could imagine that the
	company database actually exports several components for use
	over the Internet, by different users using different
	browsers. This is already enough to describe several important
	characteristics of the identifiers:
	
	<itemizedlist>
	  <listitem>
	    <para>
	      One component must have only one identity, i.e., if
	      there are several methods of accessing the component, the
	      identifier cannot depend on the method used. Consider a
	      component located on the company database, that can be
	      accessed both from inside the LAN and over the Internet. It is
	      probable that you could want to access the database directly
	      when inside the LAN, but use a web server for outside access.
	      Still, other components referring to the component must use
	      the same identity, as they do not know if they will be used
	      inside or outside the LAN.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      The format of the identifier must be useful in several
	      different environments, which means that it cannot
	      depend on, e.g., the programming language.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      As the example above shows, some sort of resolving
	      mechanism may be necessary for certain components. We really
	      do not want to build this mechanism into the specification, so
	      we instead want the identifier to allow future expansions in
	      this direction.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
    
    
    <section>
      <title>&s3;</title>
      <para>
	The identity is a <glossterm linkend="uri">Uniform Resource Identifier
	(URI)</glossterm>. The protocols currently supported are:
	
	<variablelist>
	  <varlistentry>
	    <term><literal>http:</literal></term>
	    <listitem>
	      <para>
		The object is downloaded in XML format over <glossterm
		  linkend="http">HTTP</glossterm>. Example:
		<literal>http://nada.kth.se:80/~mini/conzilla/component</literal>.
	      </para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><literal>file:</literal></term>
	    <listitem>
	      <para>
		The object is located in the local filesystem and is
		in XML format.  Example:
		<literal>file:/home/mini/public_html/conzilla/component</literal>
		is the same file as above.
	      </para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><literal>home:</literal></term>
	    <listitem>
	      <para>
		The object is located in the local filesystem, and is
		in XML format. The location is relative to the user's
		home direcory.  Example:
		<literal>home:/public_html/conzilla/component</literal>
		is the same file as above.
	      </para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><literal>res:</literal></term>
	    <listitem>
	      <para>
		A format only intended to be used by Java
		browsers. The object, in XML format, is located using
		the <literal>getResource()</literal> method of the
		current classloader, thus locating the files in the
		same location as the class files used by the
		program (for example, the JAR file containing them). Example:
		<literal>res:/conzilla/component</literal> results in
		a call <literal>getResource("conzilla/component")</literal>.
	      </para>
	    </listitem>
	  </varlistentry>
	  
	  <varlistentry>
	    <term><literal>urn:path:</literal></term>
	    <listitem>
	      <para>
		This is the preferred type of identifier, conforming
		to the <glossterm linkend="pathurn">Path
		URN</glossterm> Specification draft
		<citation>pathurnspec</citation>. It has the structure
		<literal>urn:path:/path/component</literal>, where
		<literal>path</literal> is an abstract path to the
		component, and <literal>component</literal> the name
		of the component<footnote>
		  <para>
		    This way, the system indeed becomes a Knowledge
		    <emphasis>Path</emphasis>work.
		  </para>
		</footnote>.
	      </para>

	      <para>
		The URI is translated using a resolving mechanism into a
		URI list, as described in
		<citation>pathurnspec</citation>. These URIs are
		recursively tried until a URL in one of the above forms
		is found<footnote>
		  <para>
		    Until other protocols are supported, that
		    is. Notably, other protocols will be needed to
		    access CORBA components.
		  </para>
		</footnote>.
	      </para>
	      
	      <para>
		The resolver maps paths into base URIs, whereto the
		component name is appended.  The path may match
		partially, and several paths of different lengths may
		therefore match. In this case, the longest (most
		specific) match will be tried first. The non-mathing
		part is appended to the base URI before the component
		name.
	      </para>
	      
	      <para>
		As an extension to the Path URN specification, the
		resolver may give the data format that components
		under the given base URI uses, which it describes with
		a MIME type. This enables the browser to choose the
		preferred data format, based on for example the domain
		of the server (if local, use direct access to database
		etc.). If no format is given, the format implied
		depends on the URI protocol used.
	      </para>
	      
	      <para>
		Thus, if your resolver maps the path
		<literal>/math/geometry</literal> to
		<literal>http://www.nada.kth.se/cid/geomcomponents</literal>,
		which uses the XML format (and MIME type
		<literal>text/xml</literal>), the URI
		<literal>urn:path:/math/geometry/euclidean/circle</literal>
		will become
		<literal>http://www.nada.kth.se/cid/geomcomponents/euclidean/circle</literal>
		which can be immediately downloaded.
	      </para>
	    </listitem>
	  </varlistentry>
	</variablelist>
      </para>
      
      <para>
	These identifiers can be used from anywhere to refer to a
	certain component, with the only reservations being that
	certain URIs are relative to your current location, and
	therefore are intrinsically local.
      </para>

      <para>
	The resolving mechanism for Path URNs is currently a table with
	all known path names. This table is loaded upon startup of the
	browser.
      </para>
    </section>
    
    
    <section>
      <title>&s4;</title>
      <para>
	The choice of URI as the identifier was made very early in the
	design process, and has never really been questioned. It is
	based on the following characteristics of URIs:
	
	<itemizedlist>
	  <listitem>
	    <para>
	      The existing <glossterm linkend="url">URL</glossterm>
	      protocols immediately usable: http, ftp, file etc., as
	      well as the probability of useful future
	      protocols. Especially in mind are the specifications for
	      identifying single files inside JAR archives with a URI,
	      which makes it simpler to download whole archives of
	      components at once, as well as definitions for
	      identification over IOCP (used in CORBA) with the help
	      of URIs. URIs, and not least URLs, has been proved
	      useful and functional.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      The existing standardized encoding in ASCII text,
	      making it universally usable, as well as the universal support
	      in different programming environments. A not small part of
	      this point is that users actually are used to this type of
	      identifiers. Note that the encoding of special characters in
	      ASCII is not yet implemented.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      The hierarchical structure of the standard URI
	      protocols. This is what makes the ideas of a <quote>base
	      URIs</quote> and <quote>relative URIs</quote> work; it is
	      a simple matter of appending one string to another.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      The possibility of defining your own protocols. In fact,
	      URIs have exactly the flexibility wanted: it allows
	      everything from completely abstract identifiers (such as
	      <glossterm linkend="urn">URN</glossterm>s) to
	      identifiers such as URLs which specify both location of
	      the object and the protocol of access.
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
      
      <para>
	We see no real need for support for the <glossterm
	linkend="ftp">FTP</glossterm> protocol, as this is mostly
	intended for large file transfer, which is not our
	case. Perhaps it could be interesting to use for saving
	components.
      </para>
      
      <para>
	The <literal>urn:path:</literal> protocol is used in order to
	be able to specify the location of an object without having to
	specify the method of access, i.e., data format and physical
	location. Such a protocol is absolutely necessary as seen in
	the discussion in <xref linkend="ch-identity-fr"/>.
      </para>
	
      <para>
	The table resolver mechanism must be replaced, as the idea of
	everyone having a complete table of paths is absurd.  The idea
	is to replace the table mechanism with, e.g., an <glossterm
	linkend="ldap">LDAP</glossterm> resolver, or even the DNS
	extension used in the Path URN specification
	<citation>pathurnspec</citation>. Such a resolver would, for a
	path, return a base URI and the data format to use, just as
	the table does today.  This resolving represents a considerable
	overhead if it has to be done for each component downloaded
	(cf. DNS when browsing the web), which is why only paths are
	queried, not individual identifiers. This allows us, namely, to
	cache the resolved paths.
      </para>
      
      <para>
	In short, we believe that we are on the right track using Path
	URNs, even though there are decisions left to take. There has gone
	a lot of thinking into the design, and we are satisfied with
	the resulting system.
      </para>
      
      <para>
	In fact, we did not originally use Path URNs, but a home brewn
	protocol. After having experimented with this protocol and
	enhanced it to fulfill our needs, we recognized that we had
	designed a simplistic version of the Path URN protocol. So we
	decided to switch to this more thought-out protocol, as it
	also is a possible future standard.
      </para>

      <para>
	Note that relative URIs in concept maps and neurons are supported.
      </para>
    </section>
  </chapter>
  
  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-default-dtd-file:"docbookx.ced"
  End:
  -->
  