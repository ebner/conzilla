  <!-- $Id$ -->


  <chapter id="ch-databasestructure">
    <title>Database structure</title>
    
    <section>
      <title>&s1;</title>
      <para>
	The database structure is the core of the Conzilla design. It
	contains the definitions of the fundamental objects that make
	up the raw material upon which concept maps are built, i.e.,
	the concepts and relations, as well as the concept maps
	themselves. It also contains the ideas for how to identify and
	locate these. The details of the design is presented
	separately, even though the basic design goals are discussed
	here.
      </para>
    </section>
    
    
    <section>
      <title>&s2;</title>
      <para>
	The design goals we have developed for this structure are
	mostly motivated in <citation>cid17</citation> and
	<citation>cid52</citation>. The ideas described there have
	resulted in the following fundamental demands on the design:
	
	<itemizedlist>
	  <listitem>
	    <para>
	      It must be able to describe mind-maps that strongly
	      resemble <glossterm linkend="uml">Unified Modeling
	      Language (UML)</glossterm> diagrams. UML, designed by the
	      <glossterm linkend="omg">Object Modeling Group
	      (OMG)</glossterm>, is originally designed to be used as
	      a modeling language for object oriented programming
	      languages. It contains specifications for drawing class
	      diagrams describing the relationships between classes,
	      which correspond to our concepts, and many other
	      important types of diagrams. The class diagrams have
	      been the most important inspiration for us, as they
	      directly correspond to concept maps, but also activity
	      diagrams are of fundamental importance, as they are able
	      to describe the sequencing demands of, e.g., a course.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      It must contain all the information necessary to
	      fully describe the concepts and their relations, and the
	      concept maps in which they are located. This structure will be
	      used in automated situations not unlike a relational database,
	      such as searching for concepts having this or that relation to
	      a given concept, or collecting lists of concepts related to a
	      certain area. It is therefore necessary that no information is
	      given only implicitly (via visual cues, for example).
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      A good separation between the logical relations
	      between concepts on the one hand, and the presentation of them
	      in concept maps on the other, is a corner stone in the design.
	      This is necessary not only to allow concepts to be present in
	      several concept maps, but also to allow other types of concept
	      maps, for example three-dimensional. The idea is that concepts
	      form a complex interconnected network, of which concept maps
	      present different views.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      It must be independent of the representation of the data
	      one uses, be it <glossterm
	      linkend="xml">XML</glossterm>, <glossterm
		linkend="corba">CORBA</glossterm>
	      or something else, and therefore also independent of the
	      particular concept browser in use.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      The concepts and concept maps must be readily
	      locatable, separately, be it locally on your computer, over a
	      LAN or over the Internet. This is not as trivial as it sounds.
	      It means that concepts on your local database server must be
	      able to have relations with concepts located anywhere on the
	      Internet. This is necessary to be able to, e.g., build your
	      own concept maps using already existing concepts. Such
	      functionality demands a well defined identification
	      system.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      It must allow the introduction of content into the
	      system, which includes linking concepts to content, and
	      representing filters for this content to be able to filter it
	      into different aspects.
	    </para>
	  </listitem>
	  
	  <listitem>
	    <para>
	      It must label the elements of the system according to
	      a standardized metadata scheme. This is actually much more
	      important than one may initially believe, as this information
	      gives us the possibilities to search amongst concepts not only
	      by contextual criteria (such as being related to a certain
	      concept), but also by author, description, keywords etc..
	    </para>
	  </listitem>
	</itemizedlist>
      </para>
    </section>
    
    
    <section>
      <title>&s3;</title>
      <para>
	The system in many ways resembles a certain type of virtual,
	in the sense of distributed and disconnected, relational
	database. It consists of three types of components: neurons,
	neuron types, and concept maps. Each instance of these three
	types is a separate object in the virtual database, each with
	a separate explicit identity. Each component also has metadata
	information in the form of tags that have one value. It still
	does not exist any obligatory tags and all tags are possible.
	The tags does not yet have any datatype.
      </para>
      
      <para>
	The rest of the architecture is described in <xref
	linkend="ch-identity"/>, <xref linkend="ch-neurons"/>, <xref
	linkend="ch-content"/>, <xref linkend="ch-filters"/> and <xref
	linkend="ch-conceptmaps"/>.
      </para>
    </section>
    
    
    <section id="ch-databasestructure-4">
      <title>&s4;</title>
      <para>
	It has yet to be proven that the wanted design is actually
	implementable in a realistically efficient and clean fashion.
	That is, it has been implemented, but not tested on a large
	scale. What could cause problems is that we actually implement
	a distributed relational database, which very well may cause
	problems (not least with performance) we were not aware of
	when designing the system. In particular, the search functions
	have not been satisfyingly stuided.
      </para>
      
      <para>
	The requirements described for the design places strong
	distributability demands on the concepts, and therefore marks
	a real departure from UML. UML, even though it deals with the
	logical information in diagrams, does not deal with the
	problem of distributing the logical information, but only with
	how to combine it visually.
      </para>
      
      <para>
	In contrast, the design taking form here is primarily a
	logical design. Concepts do not have specific visual
	attributes, and are not placed in a specific concept map.
	Therefore, the role of UML is to provide inspiration for the
	elements of the logical design of concepts and specifications
	for the visual design of concept maps. But inspiration for
	distributability must be found elsewhere, such as the MOF.
      </para>
      
      <para>
	The <glossterm linkend="mof">Meta Object Facility
	(MOF)</glossterm> is a proposed standard for meta- models
	developed by the <glossterm linkend="omg">OMG</glossterm> in
	cooperation with several large software vendors. A meta-model
	is in essence a modeling language such as UML, and the MOF has
	a similar scope to that of UML. As described in
	<citation>mofspec</citation>, the main purpose of the OMG MOF
	is to
	
	<blockquote>
	  <para>
	    provide a set of CORBA interfaces that can be used to
	    define and manipulate a set of interoperable metamodels.
	  </para>
	</blockquote>
      </para>
      
      <para>
	In practical terms, the MOF is a distributed modeling
	language, much like what we want to design. The MOFs initial
	purpose is to be used in object oriented analysis and design
	(similar to UML), but the OMG expects the MOF to be used to
	model other information systems. So the question arises: why
	not use the MOF?  This question demands a lengthy discussion.
	There are several problems with the MOF that makes it
	problematic to use for our purposes, the most important of
	which are described in the following sections.
      </para>
      
      <section>
	<title>Modeling objectives</title>
	<para>
	  The MOF Specification <citation>mofspec</citation> states
	  that the MOF designers provide
	  
	  <blockquote>
	    <para>
	      a balanced model that is neither too simplistic (one that
	      defines only classes, attributes, and associations) nor too
	      ambitious (one that has all object modeling constructs as
	      required in a general purpose modeling language like the
	      UML). The designers have specified this model to be rich
	      enough to define a variety of metamodels and precisely
	      enough to be implemented in CORBA environments.
	    </para>
	  </blockquote>
	</para>
	
	<para>
	  What they wanted to design was a model that would be
	  immediately usable in object oriented analysis and
	  design. One important part of the MOF is the MOF to CORBA
	  <glossterm linkend="idl">IDL</glossterm> mapping, which
	  makes it possible to automatically generate programming
	  interfaces for objects described by the MOF. This means that
	  an object described by the MOF primarily is meant to have a
	  programming interface.
	</para>
	
	<para>
	  Our purpose differs from this in that the models we want to
	  construct are models of any thinkable concepts. Such
	  concepts are often not specific enough to be described as
	  objects in a programming environment. So we actually
	  <emphasis>want</emphasis> a more simplistic model that is
	  not intended to be directly usable as a programming
	  construct.
	</para>
      </section>
      
      
      <section>
	<title>Modeling limitations</title>
	<para>
	  The MOF has several serious limitations with respect to
	  their description of associations. Firstly, they only allow
	  associations of degree two (see further <xref
	  linkend="ch-neurons-3"/>), even though this will change in
	  future versions of the MOF specification. Secondly, and more
	  serious, MOF does not view associations as being very
	  important entities on their own. As described in <xref
	    linkend="ch-neurons"/>, our design allows associations to be
	  full-fledged concepts, having all attributes the concepts of
	  today have. We believe this is a fundamental flaw in MOF
	  when it comes to usability in other contexts than object
	  oriented analysis and design, where associations usually are
	  of a simple character.
	</para>
      </section>
      
      
      <section>
	<title>Distributability</title>
	<para>
	  As the MOF design is done in CORBA, the MOF describes a
	  network of interconnected objects. There are serious problems
	  with using this directly as a basis for a project like ours.
	  The main problem is that MOF objects are directly connected to
	  each other. This would imply serious stability problems if
	  this was to be distributed globally. A large global network of
	  interconnected CORBA objects is not yet feasible, even though
	  this may be the case in the future.
	</para>
	
	<para>
	  The primary use of the MOF is inside a single development
	  environment, called a Repository, and inside this Repository
	  the objects are connected directly. The MOF specification
	  <citation>mofspec</citation> does allow references to other
	  objects in other Repositories, but notes that
	  
	  <blockquote>
	    <para>
	      it is recognized that the great majority of these object
	      interactions will remain within one vendor's boundary
	    </para>
	  </blockquote>   
	  
	  which is a position that we simply cannot accept for Knowledge
	  Patches, which must be designed with the primary purpose of
	  being used outside the Patch, interconnected to other
	  Patches.
	</para>
	
	<para>
	  Our solution is to let the objects reference each other
	  indirectly via identifiers, and to be independently
	  distributed. In spite of this, nothing stops us from designing
	  the objects in CORBA, using the CORBA Naming Service for
	  locating components, and even letting certain CORBA objects be
	  connected directly, maybe even being MOF objects. But this must not
	  be the primary design philosophy.
	</para>
	
	<para>
	  Another issue is CORBAs heavy-weight profile. By allowing the
	  distribution of objects packed in XML documents, we allow
	  lighter operation of the whole system, especially when
	  distributed over the Web.
	</para>
      </section>
      
      
      <section>
	<title>Prototypability</title>
	<para>
	  We needed a simple implementation that would give us the
	  relevant ideas for the future of this project. Implementing
	  the system using MOF would distract us from fundamental design
	  issues that arise when trying to model the mental abstractions
	  of the human mind.
	</para>
	
	<para>
	  By using our own, much more simplistic implementation, it is
	  possible to give a concrete form to our objectives and how
	  they differ from the objectives of both the MOF and UML.
	</para>
	
	<para>
	  Thus, we have concluded that the MOF is not optimal to use for
	  our project. However, the overall tendency towards
	  componentification, object oriented modeling, and information
	  distributability give us hope that there will be a suitable
	  generalization of the MOF available at some time in the
	  future.
	</para>
	
	<para>
	  What we have designed can be described as a generalization of
	  the MOF in the directions of
	  
	  <itemizedlist>
	    <listitem>
	      <para>
		usability outside programming environments, more
		precisely for the modeling of human knowledge in general,
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>
		distributability, and
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>
		ability to present parts of a very large model in
		small diagrams
	      </para>
	    </listitem>
	  </itemizedlist>
	  
	  Viewed in his way, it is obvious that MOF has inspired us in
	  important aspects as a way to represent and generalize UML
	  diagrams.
	</para>
	
	<para>

	  <classname>CORBA::RelationShips</classname> is another
	  standard interesting as inspiration. Being designed by the
	  OMG and described in <citation>corbarelationships</citation>, it is a
	  CORBA interface package containing a standardized API for
	  accessing objects and their relationships, that in some ways
	  resembles our configuration of related concepts. It has
	  several advantages over the MOF, the most important of which
	  are:
	  
	  <itemizedlist>
	    <listitem>
	      <para>
		No object oriented analysis and design fixation.
		Indeed, <classname>CORBA::RelationShips</classname>
		has been used in an early attempt by IMS to describe
		learning resources (which is very close to our
		objective).
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>
		No modeling limitations. Relations of any degree can
		be described, and relations are given a primordial role in the
		system.
	      </para>
	    </listitem>       
	    
	    <listitem>
	      <para>
		Relatively easy implementation thanks to its more
		simplistic approach.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	
	<para>
	  Why is is not used by us? There are two important reasons:
	  
	  <itemizedlist>
	    <listitem>
	      <para>
		It is designed more for relationships between physical
		resources than for representing knowledge. With this
		package, you describe the relations between objects
		external to the system, which is a motive that differs
		slightly from our motive, which is to describe relations
		between all objects inside the system.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>
		It suffers from the same distributability problems as
		for the MOF, thanks to its connected CORBA object
		nature.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	
	<para>
	  But <classname>CORBA::RelationShips</classname> is, in fact,
	  not at all far from the design we want. It has been a direct
	  influence for the present design when it comes to how to
	  represent relations. What we have designed is in principle
	  the design of <classname>CORBA::RelationShips</classname>
	  with two important changes:
	  
	  <itemizedlist>
	    <listitem>
	      <para>
		Making the system independent from CORBA in order to
		facilitate the wished level of distributability.
	      </para>
	    </listitem>
	    
	    <listitem>
	      <para>
		Making the system more self-contained, in the sense
		that the relations are between objects inside the system.
	      </para>
	    </listitem>
	  </itemizedlist>
	</para>
	
	<para>
	  It is obvious that it will be an important inspiration for the
	  design of the CORBA binding.
	</para>
      </section>
    </section>
  </chapter>
  
  <!-- Keep this comment at the end of the file
  Local variables:
  sgml-default-dtd-file:"docbookx.ced"
  End:
  -->
  